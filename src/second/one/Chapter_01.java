package second.one;

public class Chapter_01 {
/**
 * 1. Java 란?
 * 자바는 썬 마이크로시스템즈에서 개발하여 1996년 1월에 공식적으로 발표한 객체지향 프로그래밍 언어이다.
 * 자바의 가장 큰 특징은 운영체제(Operating System, OS)에 독립적이라는 것이다.
 * 자바로 작성된 프로그램은 운영체제의 종류에 관계없이 실행이 가능하기 때문에, 운영체제에 따라 프로그램을 전혀 변경하지 않고도 그대로 실행이 가능하다.
 * 이러한 장점으로 인해 자바는 다양한 기종의 컴퓨터와 운영체제가 공존하는 인터넷 환경에 적합한 언어로써 인터넷의 발전과 함께 많은 사용자층을 확보할 수 있었다.
 * 또한 객체지향 언어로써 C++ 의 장점을 채택하는 동시에 잘 사용되지 않는 부분은 과감히 제외시킴으로써 비교적 배우기 쉽고 이해하기 쉬운 간결한 표현이
 * 가능하도록 했다. 자바는 풍부한 클래스 라이브러리(Java API) 를 통해 프로그래밍에 필요한 요소들은 기본적으로 제공하기 때문에 자바 프로그래머는 단순히
 * 이 클래스 라이브러리만을 잘 활용해도 강력한 기능의 자바 프로그램을 작성할 수 있다.
 *
 *
 * 2. Java 의 역사
 *
 * 자바의 역사는 1991년 썬의 엔지니어들에 의해서 고안된 오크(OaK) 라는 언어에서부터 시작되었다. 제임스 고슬링과 아서 밴 호프와 같은 썬의 엔지니어들의
 * 원래 목표는 가전제품에 탑재될 소프트웨어를 만드는 것이었다. 처음에는 작은 가전제품이나 PDA 와 같은 소형기기에 사용될 목적이었으나 여러 종류의 운영체제를
 * 사용하는 컴퓨터들이 통신하는 인터넷이 등장하자 운영체제에 독립적인 Oak 가 이에 적합하다고 판단하여 이를 인터넷에 적합하도록 그 개발 방향을 바꾸면서
 * 이름을 자바(Java) 로 변경하였으며, 자바로 개발한 웹브라우저인 '핫 자바' 를 발표하고 그 다음 해인 1996년 1월에 자바의 공식 버전을 발표했다.
 *
 *
 * 3. 자바의 특징
 *
 * 1) 운영체제에 독립적이다.
 * 기존의 언어는 한 운영체제에 맞게 개발된 프로그램을 다른 종류의 운영체제에 적용하기 위해서는 많은 노력이 필요했지만, 자바에서는 더 이상 그런 노력을 하지 않아도 된다.
 * 이것은 일종의 에뮬레이터인 자바가상머신(Java Virtual Machine, JVM) 을 통해서 가능한 것인데, 자바 응용프로그램은 운영체제나 하드웨어가 아닌 JVM 하고만 통신하고
 * JVM이 자바 응용프로그램으로부터 전달받은 명령을 해당 운영체제가 이해할수 있도록 변환하여 전달한다. 자바로 작성된 프로그램은 운영체제에 독립적이지만, JVM은
 * 운영체제에 종속적이어서 썬에서는 여러 운영체제에 설치할 수 있는 서로 다른 버전의 JVM을 제공한다.
 * 그래서 자바로 작성된 프로그램은 운영체제와 하드웨어에 관계없이 실행 가능하며 이것을 '한번 작성하면, 어디서나 실행된다.(Write once, run anywhere)' 라고 표현하기도 한다.
 *
 * 2) 객체지향 언어이다.
 * 자바는 프로그래밍의 대세로 자리 잡은 객체지향 프로그래밍 언어(Object-oriented programming language) 중의 하나로 객체지향의 개념인 상속, 캡슐화, 다형성이 잘 적용된
 * 순수한 객체지향 언어라는 평가를 받고 있다.
 *
 * 3) 비교적 배우기 쉽다.
 * 자바의 연산자와 기본 구문은 C++ 에서, 객체지향 관련 구문은 스몰톡이라는 객체지향 언어에서 가져왔다. 이들 언어의 장점은 취하면서 복잡하고 불필요한 부분은 과감히 제거하여
 * 단순화함으로서 쉽게 배울 수 있으며, 간결하고 이해하기 쉬운 코드를 작성할 수 있도록 하였다. 본래 객체지향 언어들은 재사용성과 유지보수의 용이성 등의 많은 장점에도 불구하고
 * 배우기가 어렵기 때문에 많은 사용자층을 확보하지 못했으나 자바의 간결하면서도 명료한 객체지향적 설계는  많은 사용자들이 쉽게 이해하고 활용할 수 있게함으로써
 * 객체지향 프로그래밍 언어의 저변확대에 크게 기여했다.
 *
 * 4) 자동 메모리 관리(Garbage Collector)
 * 자바로 작성된 프로그램이 실행되면, 가비지 컬렉터가 자동적으로 메모리를 관리해주기 때문에 프로그래머는 메모리를 따로 관리 하지 않아도 된다. 가비지 컬렉터가 없다면
 * 프로그래머가 사용하지 않는 메모리를 체크하고 반환하는 일을 수동적으로 처리해야 할 것이다. 자동으로 메모리를 관리한다는 것은 때때로 비효율적일 때도 있으나 프로그래머가
 * 보다 프로그래밍에 집중할 수 있도록 도와준다.
 *
 * 5) 네트워크와 분산처리를 지원한다.
 * 인터넷과 대규모 분산환경을 염두에 둔 까닭인지 풍부하고 다양한 네트워크 프로그래밍 라이브러리를 통해 비교적 짧은 시간에 네트워크 관련 프로그램을 쉽게 개발할 수 있도록 지원한다.
 *
 * 6) 멀티 쓰레드를 지원한다.
 * 일반적으로 멀티 쓰레드(multi-thread) 의 지원은 사용되는 운영체제에 따라 구현방법도 상이하며, 처리 방식도 다르다. 그러나 자바에서 개발되는 멀티쓰레드 프로그램은 시스템과는
 * 관계없이 구현 가능하며, 관련 라이브러리가 제공되므로 구현이 쉽다. 그리고 여러 쓰레드에 대한 스케줄링을 자바 인터프리터가 담당한다.
 *
 * 7) 동적 로딩을 지원한다.
 * 보통 자바로 작성된 애플리케이션은 여러 개의 클래스로 구성되어 있다. 자바는 동적 로딩을 지원하기 때문에 실행 시에 모든 클래스가 로딩되지 않고 필요한 시점에 클래스를 로딩하여
 * 사용할 수 있다는 장점이 있다.'
 *
 *
 * 4.자바 가상 머신 (JVM)
 * JVM 이란 'Java Virtual Machine' 을 줄인 것으로 직역하면 자바를 실행하기 위한 가상 기계라고 할 수 있을 것이다. 여기서 '가상 기계'란 소프트웨어로 구현된 하드웨어를 뜻하는
 * 넓은 의미의 용어이며, 컴퓨터의 성능이 향상됨에 따라 점점 더 많은 하드웨어들이 소프트웨어화 되어 컴퓨터속으로 들어오고 있다. 이와 마찬가지로 가상 기계란 실제 컴퓨터가 아닌
 * 소프트웨어로 구현된 컴퓨터, 즉 컴퓨터 속의 컴퓨터라고 할 수 있다. 자바로 작성된 애플리케이션은 모두 이 가상 컴퓨터 JVM에서만 실행되기 때문에 어느 운영체제라 하더라도 반드시
 * JVM이 필요하다.
 *
 * Java 애플리케이션
 *       ↓
 *     JVM
 *       ↓
 *  OS(Window)
 *       ↓
 *  컴퓨터(하드웨어)
 *
 * 일반 애플리케이션의 코드는 OS 만 거치고 바로 하드웨어로 전달되는데 반해 자바 애플리케이션은 JVM을 한번 더 거치고, 컴파일 된 상태가 아닌 실행 시 해석되기 때문에 속도가 느리다는 단점이
 * 있다. 또한 자바애플리케이션은 JVM 하고만 상호작용을 하기 때문에 운영체제에 독립적이지만, JVM은 OS에 종속적이기 때문에 해당 OS 에 맞는 JVM 이 각각 필요하다.
 * ex) Window용 JVM, Linux용 JVM, Macintosh용 JVM 등
 *
 *
 * 5. 첫 번째 자바 프로그램 작성하기.
 *
 * 메모장 파일을 열고 다음과 같이 작성한 후, Hello.java 형식으로 저장하자.
 *
 * class Hello {
 *     public static void main(String[] args) {
 *         System.out.println("Hello, world!");
 *     }
 * }
 *
 * 이 예제는 화면에 Hello, world 를 출력하는 간단한 프로그램이다.
 * 이 예제를 실행하기 위해서는 먼저 자바 컴파일러(javac.exe)를 사용해서 소스파일(Hello.java)로부터 클래스 파일(Hello.class)를 생성해야 한다.
 * 그 다음 자바 인터프리터(java.exe)로 실행한다.
 *
 * Hello.java(소스 파일 작성)      →       Hello.class 생성         →      "Hello, world" 출력
 *                          javac.exe                         java.exe
 *
 * 자바 프로그램을 실행 시켰을 때 내부적인 진행 순서는 다음과 같다.
 * ① 프로그램의 실행에 필요한 클래스(*.class)를 로드한다.
 * ② 클래스 파일을 검사한다.(파일 형식, 악성코드 체크)
 * ③ 지정된 클래스에서 main(String[] args)메인 메서드를 찾아 호출한다.
 *
 *
 *
 */

}
