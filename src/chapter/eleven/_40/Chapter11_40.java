package chapter.eleven._40;

public class Chapter11_40 {

  /** ◆ 이진 탐색 트리 (binary search tree)
   *
   * 이진 탐색 트리는 부모 노드의 왼쪽에는 부모 노드보다 작은 값을 가진 자식 노드를, 오른쪽에는 부모 노드보다 큰 값을 가진 자식 노드를 저장하는 이진 트리이다.
   * 예를 들어 데이터를 5, 1, 7 의 순서로 저장한 이진 탐색 트리의 구조는 아래와 같이 표현될 수 있다.
   * 
   *          5
   *      /      \
   *  1(작은값)   7(큰값)
   *  
   *  왼쪽 마지막 값에서부터 오른쪽 값까지 값을 '왼쪽 노드 → 부모 노드 → 오른쪽 노드 순으로 읽어오면 오름차순으로 정렬된 순서를 얻을 수 있다.
   *  TreeSet 은 이처럼 정렬된 상태를 유지하기 때문에 단일 값 검색과 범위 검색(range search), 예를 들면 3과 7사이의 범위에 있는 값을 검색하기 등
   *  이 매우 빠르다.
   *   저장된 값의 개수에 비례해서 검색 시간이 증가하지만 값의 개수가 10배 증가해도 특정 값을 찾는데 필요한 비교 횟수가 3 ~ 4번만 증가하는 정도이기 때문에
   *   검색 효율이 뛰어난 자료구조이다. 삭제하는 경우 트리의 일부를 재구성해야 하므로 LinkedList 보다 데이터의 추가/삭제 시간은 더 걸린다.
   *   대신 배열이나 LinkedList 에 비해 검색과 정렬 기능이 뛰어나다.
   *
   *
   *   ==============================================================================
   *   이진 탐색 트리는
   *   - 모든 노드는 최대 두 개의 자식 노드를 가질 수 있다.
   *   - 왼쪽 자식 노드의 값은 부모 노드의 값보다 작고 오른쪽 자식 노드의 값은 부모 노드보다 크다.
   *   - 노드의 추가/삭제에 시간이 걸린다.(순차적으로 저장하지 않으므로)
   *   - 검색(범위검색)과 정렬에 유리하다.
   *   - 중복된 값을 저장하지 못한다.
   *   ==============================================================================
   *
   *  
   *
   *
   *
   *
   *
   * */






}
