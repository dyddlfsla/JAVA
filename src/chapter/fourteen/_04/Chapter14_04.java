package chapter.fourteen._04;

public class Chapter14_04 {
  /*
  * ◆ 람다식은 익명 함수? 익명 객체!
  *
  * 자바에서 모든 메서드는 클래스 내에 포함되어야 하는데, 람다식은 어떤 클래스에 포함되는 것일까?
  * 지금까지 람다식이 메서드와 동등한 것처럼 설명해왔지만, 사실 람다식은 익명 클래스의 객체와 동등하다.
  *
  * (int a, int b) -> a > b ? a : b
  *
  *             ↓
  *
  * new Object() {
  *   int max(int a, int b) {
  *     return a > b ? : a : b;
  *   }
  * }
  *
  * 위 코드에서 익명 클래스의 메서드 이름 max 는 임의로 붙인 것일 뿐 실질적인 의미는 없다.
  * 어쨌든 람다식으로 정의된 익명 객체의 메서드를 어떻게 호출할 수 있을 것인가?
  * 참조변수가 있어야 객체의 메서드를 호출할 수 있으므로 일단 이 익명 객체의 주소를 f 라는 참조변수에 저장해보자.
  *
  * 타입 f = (int a, int b) -> a > b ? a : b //참조변수의 타입은 무엇인가?
  *
  * 그러면, 참조변수의 타입은 어떤 것이어야 할까? 참조형이니까 클래스 또는 인터페이스가 가능할 것이다.
  * 그리고 람다식과 동일한 메서드가 정의되어 있어야 할 것이다. 그래야 참조변수로 익명 객체(람다식)의 메서드를 호출할 수 있기 때문이다.
  *
  * ◆ 함수형 인터페이스(Functional Interface)
  *
  * 예를 들어, 아래와 같이 메서드 max 가 선언된 MyFunction 인터페이스가 정의되어 있다고 하자.
  *
  * interface MyFunction {
  *   public abstract max(int a, int b);
  * }
  *
  * 그러면 이 인터페이스를 구현한 익명 클래스의 객체는 다음과 같이 생성할 수 있다.
  *
  * MyFunction f = new MyFunction() {
  *                     public int max(int a, int b) {
  *                       return a > b ? a : b;
  *                     }
  *                  }
  *
  * int big = f.max(5, 3);
  *
  * MyFunction 인터페이스에 정의된 메서드 max() 는 람다식 (int a, int b) -> a > b ? a : b 와 메서드의 선언부가 일치한다.
  * 그래서 위의 코드의 익명 객체를 람다식으로 아래와 같이 대체할 수 있다.
  *
  *  MyFunction f = (int a, int b) -> a > b ? a : b // 익명 객체를 람다식으로 대체한다.
  *  int big = f.max(5, 3); //익명 객체의 메서드를 호출한다.
  *
  * 이처럼 MyFunction 인터페이스를 구현한 익명 객체를 람다식으로 대체할 수 있는 이유는 람다식도 실제로는 익명 객체이고, MyFunction 인터페이스를 구현한 익명
  * 객체의 메서드 max() 와 람다식의 매개변수 타입과 갯수 그리고 반환값이 일치하기 때문이다.
  *
  * 하나의 메서드가 선언된 인터페이스를 정의해서 람다식을 다루는 것은 기존의 자바 규칙들을 어기지 않으면서도 자연스럽다.
  * 그래서 인터페이스를 통해 람다식을 다루기로 결정되었으며, 람다식을 다루기 위한 인터페이스를 '함수형 인터페이스(Functional Interface)' 라고 한다.
  *
  * @FunctionalInterface // 함수형 인터페이스를 작성할 때 사용하는 애너테이션. 컴파일러가 해당 인터페이스가 하나의 추상메서드만 가지고 있는지 체크한다.
  * interface MyFunction { //함수형 인터페이스 MyFunction 을 정의.
  *   public abstract int max(int a, int b);
  * }
  *
  * 단, 함수형 인터페이스에는 오직 하나의 추상 메서드만 정의되어 있어야 한다는 제약이 있다.
  * 그래야 람다식과 인터페이스의 메서드가 1:1로 연결될 수 있기 때문이다.
  *
  *
  *
  *
  * */
}
