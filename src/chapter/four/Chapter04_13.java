package chapter.four;

public class Chapter04_13 {

  /** ◆ for 문
   *
   * 반복문은 어떤 작업이 반복적으로 수행되도록 할 때 사용되며, 반복문의 종류로는 for 문과
   * while 문, do-while 문이 있다.
   *
   * for 문과 while 문은 기능과 구조가 유사하여 어느 경우에나 서로 변환이 가능하다.
   * 반복 횟수를 알고 있을 때에는 for 문을, 그렇지 않을 떄에는 while 문을 사용한다.
   *
   *  for (int i = 1; i <= 5 i++) {
   *    System.out.println("I can do it.");
   *  }
   *
   *  for 문의 구조와 수행 순서
   *
   *  for 문은 아래와 같이 '초기화', '조건식', '증감식', '블럭{}', 모두 4부분으로 이루어져 있으며
   *  조건식이 참인 동안 블럭{} 내의 문장들을 반복하다 거짓이 되면 반복문을 벗어난다.
   *
   *  for (①초기화식; ②조건식; ④증감식) {
   *    //③ 수행될 문장.
   *
   *    제일 먼저 '초기화'가 수행되고, 그 이후부터는 조건식이 참인 동안 ②조건식 → ③수행될 문장 → ④증감식
   *    순서로 계속 반복된다. 그러다가 조건식이 거짓이 되면, for 문 전체를 빠져 나간다.
   *  }
   *
   *  1. 초기화
   *  반복문에 사용될 변수를 초기화 하는 부분이며 처음에 한번만 수행된다. 보통 변수 하나로 for 문을 제어하지만
   *  때에 따라서는 ',' 콤마를 사용하여 둘 이상의 변수를 사용할 수도 있다. 단 두 변수의 타입은 같아야 한다.
   *
   *  for (int i = 1; i <= 10; i++) {...}
   *  for (int i = 1, j = 0; i <= 10; i++) {...}
   *
   *  2. 조건식
   *  조건식의 값이 참(true)이면 반복을 계속하고, 거짓(false)이면 반복을 중단하고 for 문을 벗어난다.
   *  for 뜻이 '~하는 동안'이므로 조건식이 '참인 동안'이라고 생각하면 편하다.
   *
   *  조건식을 잘못 작성하면 블럭{} 내의 문장이 한번도 수행되지 않거나 영원히 반복되는 무한 반복에 빠질 수 있으니
   *  주의해야 한다.
   *
   *  3. 증감식
   *  반복문을 제어하는 변수의 값을 증가 또는 감소시키는 것이다. 매 반복마다 변수의 값이 증감식에 의해서
   *  점진적으로 변하다가 결국 조건식이 거짓이 되어 for 문을 벗어나게 된다. 연산자 '++' 이 자주 사용되지만,
   *  다음과 같이 다양한 연산자들로 증감식을 작성할 수도 있다.
   *
   *  for (int i = 1; i <= 10; i++) {...}  //1부터 10까지 1씩 증가
   *  for (int i = 1; i <= 10; i--) {...}  //1씩 감소
   *  for (int i = 1; i <= 10; i+=2) {...}  //2씩 증가
   *  for (int i = 1; i <= 10; i*=3) {...}  //3배씩 증가
   *
   *  증감식 역시 콤마(,)를 사용하여 두 문장을 연결할 수 있다.
   *
   *  for (int i = 1, j = 1; j = 10, i<=10; i++, j--;) {...}
   *
   *  지금까지 살펴본 이 세가지 요소는 필요하지 않으면 생략 가능하며 심지어 3가지 모두를 생략할 수도 있다.
   *
   *  for(;;) {...} // 초기화, 조건식, 증감식 모두 생략. 조건식은 항상 참이며 무한반복이 된다.
   *
   *
     * */

  public static void main(String[] args) {
    for (int i = 1; i <= 5; i++) {
      System.out.println(i);
    }

    for (int i = 1; i <= 5; i++) {
      System.out.print(i);
    }
  }

}
