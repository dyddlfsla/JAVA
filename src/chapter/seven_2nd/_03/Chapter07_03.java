package chapter.seven_2nd._03;

public class Chapter07_03 {

  /** ◆ 클래스 간의 관계 - 포함관계
   *
   * 지금까지 상속을 통해 클래스 간에 관계를 맺어주고 클래스를 재사용하는 방법에 대해서 알아보았다. 상속이외에도 클래스를 재사용하는 또 다른 방법이
   * 있는데, 클래스 간에 '포함(composite)' 관계를 맺어주는 것이다. 클래스 간의 포함 관계를 맺어주는 것은 한 클래스의 멤버변수로 다른 클래스 타입의
   * 참조변수를 선언하는 것을 뜻한다.
   *
   * 원(Circle) 을 표현하기 위한 Circle 클래스와 좌표상의 한 점을 다루기 위한 Point 클래스가 다음과 같이 정의되어 있다고 하자.
   *
   * class Circle {
   *   int x; //원점의 x 좌표
   *   int y; //원점의 y 좌표
   *   int r; //반지름(radius)
   * }
   *
   * class Point {
   *   int x; //x 좌표
   *   int y; //y 좌표
   * }
   *
   * Point 클래스를 재사용해서 Circle 클래스를 작성한다면 다음과 같이 할 수 있을 것이다.
   *
   * class Circle {
   *   Point c = new Point(); //원점
   *   int r;
   * }
   *
   * 이와 같이 한 클래스를 작성하는 데 다른 클래스를 멤버변수로 선언하여 포함시키는 것은 좋은 생각이다. 하나의 거대한 클래스를 작성하는 것보다
   * 단위별로 여러 개의 클래스를 작성한 다음, 이 단위 클래스들을 포함 관계로 재사용하면 보다 간결하고 손쉽게 클래스를 작성할 수 있다.
   * 또한 작성된 단위 클래스들은 다른 클래스를 작성하는데 재사용될 수 있을 것이다.
   *
   * class Car {
   *   Engine e = new Engine();
   *   Door[] d = new Door[4];
   *   ...
   * }
   *
   *
   *
   * */

}
