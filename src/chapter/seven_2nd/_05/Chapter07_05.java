package chapter.seven_2nd._05;

public class Chapter07_05 {

  /** ◆ 단일 상속(single inheritance)
   *
   * 또 다른 객체지향언어 C++ 에서는 여러 조상 클래스로부터 상속 받는 것이 가능한 '다중 상속(multiple inheritance)' 를 허용하지만
   * 자바에서는 단일 상속만을 허용한다. 그래서 둘 이상의 클래스로부터 상속을 받을 수 없다. 예를 들어, Tv 클래스와 DVD 클래스가 있을 때,
   * 이 두 클래스로부터 상속을 받는 TvDVD 클래스를 작성할 수 없다. 그래서 TvDVD 클래스는 조상 클래스로 Tv 클래스와 DVD 클래스 중 하나만 선택해야 한다.
   *
   * class TvDVD extends Tv, DVD {
   *   ... //에러. 조상은 하나만 허용한다.
   * }
   *
   * 다중 상속을 허용하면 여러 클래스로부터 상속 받을 수 있기 때문에 복합적인 기능을 가진 클래스를 쉽게 작성할 수 있다는 장점이 있지만, 클래스 간의 관계가
   * 매우 복잡해진다는 것과 서로 다른 클래스로부터 상속받은 멤버들의 이름이 같은 경우 구별할 수 있는 방법이 없다는 단점을 가지고 있다.
   * 만일 다중 상속을 허용해서 TvDVD 클래스가 Tv 클래스와 DVD 클래스를 모두 조상으로 하여 두 클래스의 멤버들을 상속받는다고 가정해 보자.
   *
   * Tv 클래스에도 power() 라는 메서드가 있고, DVD 클래스에도 power() 라는 메서드가 있을 때 자손인 TvDVD 클래스는 어느 조상 클래스의 power() 를
   * 상속받게 되는 것일까?
   *
   * 둘 다 상속받게 된다면 TvDVD 클래스 내에서 선언부(이름과 매개변수)만 같고 서로 다른 내용의 두 메서드를 어떻게 구별할 것인가?
   * static 메서드라면 메서드 이름 앞에 클래스의 이름을 붙여서 구분할 수 있다지만, 인스턴스 메서드의 경우 선언부가 같은 두 메서드를
   * 구별할 수 있는 방법은 없다.
   *
   * 이것을 해결하는 방법은 조상 클래스의 메서드 이름이나 매개변수를 바꾸는 방법 밖에 없다. 이렇게 하면 그 조상 클래스의 power() 메서드를 사용하는
   * 모든 클래스들도 변경을 해야 하므로 그리 간단한 문제가 아니다.
   *
   * ====================================================================================
   * 자바에서는 이러한 다중 상속의 문제점을 해결하기 위해 다중 상속의 장점을 포기하고 단일 상속만을 허용한다.
   * 단일 상속이 하나의 조상 클래스만을 가질 수 있기 때문에 다중 상속에 비해 불편한 점도 있지만, 클래스 간의 관계가
   * 보다 명확해지고 코드를 더욱 신뢰할 수 있게 만들어 준다는 점에서 다중 상속보다 유리하다.
   * =====================================================================================
   *
   *
   * */

}
