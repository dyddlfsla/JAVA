package chapter.seven_2nd._18;

public class Chapter07_18 {

  /** ◆ static - 클래스의, 공통적인, 고정된
   *
   * static 은 '클래스의' 또는 '공통적인' 이라는 의미를 가지고 있다. 인스턴스 변수는 하나의 클래스로부터 생성되었더라도
   * 각기 다른 값을 유지하지만, 클래스 변수(static 멤버변수) 는 인스턴스에 관계없이 동일한 값을 갖는다. 그 이유는 하나의 변수를
   * 모든 인스턴스가 공유하기 때문이다. static 이 붙은 멤버변수와 메서드, 그리고 초기화 블럭은 인스턴스가 아닌 클래스에 관계된
   * 것이기 때문에 인스턴스를 생성하지 않고도 사용할 수 있다.
   *
   * 인스턴스 메서드와 static 메서드의 근본적인 차이는 '메서드 내에서 인스턴스 멤버를 사용하는가의 여부'에 있다.
   *
   * static 이 사용될 수 있는 곳 → ① 멤버변수 ② 메서드 ③ 초기화 블럭
   *
   * 1. static 멤버변수
   * - 모든 인스턴스에 공통적으로 사용되는 클래스 변수가 된다.
   * - 클래스 변수는 인스턴스를 생성하지 않고도 사용 가능하다.
   * - 클래스가 메모리에 로딩될 때 생성된다.
   *
   * 2. static 메서드
   * - 인스턴스를 생성하지 않고도 호출이 가능한 static 메서드가 된다.
   * - static 메서드 내에서는 인스턴스 멤버들을 직접 사용할 수 없다.
   *
   * 메서드 중 인스턴스 멤버를 사용하지 않는 메서드가 있다면 static 을 붙여서 static 메서드로 선언하는 것을 고려해보도록 하자.
   * 가능하다면 static 메서드로 하는 것이 인스턴스를 생성하지 않고도 호출이 가능해서 더 편리하고 속도도 더 빠르다.
   *
   *
   * */

}

class StaticTest {
  static int width = 200; //클래스 변수(static 변수)
  static int height = 120; //클래스 변수(static 변수)

  static { //클래스 초기화 블럭
    //static 변수의 복잡한 초기화 수행
  }

  static int max(int a, int b) { //클래스 메서드
      return a > b ? a : b;
  }
}
