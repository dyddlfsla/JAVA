package chapter.seven_2nd._04;

public class Chapter07_04 {

  /** ◆ 클래스 간의 관계 결정하기
   *
   * 클래스를 작성하는 데 있어서 상속관계를 맺어 줄 것인지 포함관계를 맺어줄 것인지 결정하는 것은 때떄로 혼란스러울 수 있다.
   * 전에 예를 든 Circle 클래스의 경우, Point 클래스를 포함시키는 대신 상속관계를 맺어주었다면 다음과 같을 것이다.
   *
   * class Circle {
   *   Point c = new Point();
   *   int r;
   * }
   *
   *        ↓
   *
   * class Circle extends Point {
   *   int r;
   * }
   *
   * 두 경우를 비교해 보면, Circle 클래스를 작성하는 데 있어서 Point 클래스를 포함시키거나 상속 받도록 하는 것은 결과적으로
   * 별 차이가 없어 보인다.
   *
   * 그럴 때는 '~ 은 ~이다 (is - a)' 와 '~ 은 ~ 을 가지고 있다(has - a)' 를 넣어서 문장을 만들어보면 클래스 간의 관계가
   * 보다 명확해진다.
   *
   * ① 원(Circle) 은 점(Point) 이다. - Circle is a Point.
   * ② 원(Circle) 은 점(Point) 를 가지고 있다. - Circle has a Point.
   *
   * 원은 원점(Point) 과 반지름으로 구성되므로 위의 두 문장을 비교해 보면, 첫 번째 문장보다 두 번째 문장이 더 자연스럽고 옳다는 것을 알 수 있다.
   *
   * 이처럼 클래스를 가지고 문장을 만들었을 때, '~은 ~이다' 라는 문장이 성립한다면, 서로 상속관계를 맺어주고, '~은 ~을 가지고 있다'는 문장이
   * 성립한다면 포함관계를 맺어 주면 된다. 그래서 Circle 클래스와 Point 클래스 간의 관계는 상속관계 보다는 포함관계를 맺어주는 것이 더 옳다.
   *
   * 몇 가지 예를 더 들면, Car 클래스와 SportsCar 클래스는 'SportsCar 는 Car 이다' 와 같이 is - a 문장이 더 자연스럽고 옳기 때문에
   * 이 두 클래스는 Car 클래스를 조상으로 하는 상속 관계를 맺어주어야 한다.
   *
   * Card 클래스와 Deck 클래스는 'Deck 은 Card 를 가지고 있다' 라는 has - a 문장이 더 자연스럽기 때문에 Deck 클래스 안에 Card 클래스를
   * 포함시켜야 한다.
   *
   * =================================================================
   * 1. 상속관계 : '~ 은 ~ 이다(is - a)'
   * 2. 포함관계 : '~ 은 ~ 을 가지고 있다(has - a)'
   * =================================================================
   *
   *
   *
   * */

}
