package chapter.seven._51;

public class Chapter07_51 {

  /** ◆ 익명 클래스(anonymous class)
   *
   * 이제 내부 클래스의 마지막 종류인 익명 클래스에 대해 알아보자. 익명 클래스라는 것은 내가 직접 자식 클래스를 만드는 것이 아니라 컴파일러가
   * 대신 클래스를 생성하며 우리에게 이름을 알려주지 않기 때문에 이름이 없다고 하여 익명 클래스이다.
   * 또한 익명 클래스는 클래스의 선언과 객체 생성을 동시에 하기 때문에 단 한번만 사용될 수 있고 오직 하나의 객체만을 생성할 수 있는 1회용 클래스이다.
   *
   * ==============================================================================
   *
   *  new 조상클래스이름() {
   *    //멤버 선언
   *  }
   *
   *        또는
   *
   *  new 구현인터페이스 {
   *    //멤버 선언
   *  }
   *===============================================================================
   *
   * 익명 클래스는 이름이 없기 때문에 생성자도 가질 수 없으며, 조상 클래스의 이름이나 구현하고자 하는 인터페이스의 이름을 사용해서
   * 정의하기 때문에 하나의 클래스로 상속받는 동시에 인터페이스를 구현할 수 없다. 오로지 단 하나의 클래스를 상속 받거나 단 하나의 인터페이스만
   * 구현할 수 있다.
   *
   * 익명 클래스는 구문이 다소 생소하지만, 인스턴스 클래스를 익명 클래스로 바꾸는 연습을 많이하다 보면 곧 익숙해 질 것이다.
   * */
}

class Ex7_17 {

  Object iv = new Object() { void method() {}}; //익명 클래스
  static Object cv = new Object() { void method() {}};// 익명 클래스

  void myMethod() {
    Object lv = new Object() { void method() {}}; // 익명 클래스
  }

  /*

  * 위의 예제는 단순히 익명 클래스의 사용 예를 보여준 것이다. 이 예제를 컴파일 하면 다음과 같은 4개의 클래스파일이 생성된다.
  * Ex7_17.class
  * Ex7_17$1.class → 익명 클래스
  * Ex7_17$2.class → 익명 클래스
  * Ex7_17$3.class → 익명 클래스
  *
  * */
}
