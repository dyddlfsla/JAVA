package chapter.twelve._23;

public class Chapter12_23 {


  /*
  * ◆ 애너테이션(Annotation)
  *
  * 자바를 개발한 사람들은 소스코드에 대한 문서를 따로 만들기보다 소스코드와 문서를 하나의 파일로 관리하는 것이 더 낫다고 생각했다.
  * 그래서 소스코드의 주석에 소스 코드에 대한 정보를 저장하고 소스 코드의 주석으로부터 HTML 문서를 생성해내는 프로그램(javadoc.exe) 을 만들어서 사용했다.
  *
  * 주석 안에 소스코드에 대한 설명들이 있고, 그 안에 '@' 이 붙은 태그들이 존재한다. 미리 정의된 태그들을 이용해서 주석 안에 정보를 저장하고
  * javadoc.exe 라는 프로그램이 이 정보를 읽어서 문서를 작성하는데 사용한다.
  *
  * 이러한 기능을 응용하여, 프로그램의 소스코드 안에 다른 프로그램을 위한 정보를 미리 약속된 형식으로 포함시킨 것이 바로 애너테이션이다. 즉, 데이터에 대한 데이터, 메타데이터이다.
  * 애너테이션은 주석(comment) 처럼 프로그래밍 언어 자체에는 아무런 영향을 미치지 않지만 다른 프로그램에게 유용한 정보를 제공할 수 있다는 장점이 있다.
  *
  * 예를 들어, 자신이 작성한 소스 코드 중에서 특정 메서드만 테스트하기를 원한다면 다음과 같이 @Test 라는 애너테이션을 메서드 앞에 붙인다.
  * '@Test' 는 이 메서드를 테스트해야 한다라는 것을 테스트 프로그램에 알려주는 역할을 할 뿐, 소스 코드 그 자체에는 아무런 영향을 미치지 않는다. 주석처럼 존재하지 않는 것이나 다름없다.
  *
  *  @Test // 이 메서드가 테스트의 대상임을 테스트 프로그램에게 알린다.
  *  public void method() {...}
  *
  * 테스트 프로그램에게  테스트할 메서드를 일일이 알려주지 않고, 해당 메서드 앞에 애너테이션만 붙이면 된다니 얼마나 편리한가. 그렇다고 @Test 가 모든 프로그램에게 의미가 있는 것은 아니다.
  * 해당 프로그램에 미리 정의된 종류와 형식으로 작성해야만 의미가 있다. @Test 는 테스트 프로그램을 제외한 다른 프로그램에게는 아무런 의미가 없는 정보일 것이다.
  *
  * 애너테이션은 크게, JDK 에서 기본적으로 제공하는 것과 다른 프로그램에서 제공하는 것 두 가지가 있는데
  * 어느 것이든 그저 약속된 형식으로 정보를 제공하기만 하면 될 뿐이다. 애너테이션이 제공한 정보를 이용해서 내부적으로 어떻게 처리하는지까지는 지금 학습 단계에서는 고민하지 않길 바란다.
  *
  * JDK 에서 제공하는 표준 애너테이션은 주로 컴파일러를 위한 것으로 컴파일러에게 유용한 정보를 제공한다. 그리고 새로운 애너테이션을 정의할 때 사용하는 메타 애너테이션도 제공한다.
  *
  * ※ JDK 에서 제공하는 애너테이션은 'java.lang.annotation' 패키지 안에 포함되어 있다.
  *
  *
  *
  *
  *
  *
  *
  * */

}
