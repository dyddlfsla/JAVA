package chapter.twelve._01;

public class Chapter12_01 {

  /*
  * ◆ 제네릭스(Generics)
  *
  * 제네릭스는 다양한 타입의 객체들을 다루는 메서드나 컬렉션 클래스에 컴파일 시의 타입 체크(compile-time type check) 를 해주는 기능이다.
  * 객체의 타입을 컴파일 시에 체크하기 때문에 타입 안정성을 높이고 형변환의 번거로움을 줄일 수 있다.
  *
  * 예를 들어, ArrayList 의 경우 다양한 종류의 객체를 담을 수 있긴 하지만 보통 한 종류의 객체를 담는 경우가 많다.
  * 아래와 같이 ArrayList 를 생성할 때, 저장할 객체의 타입을 지정해주면 지정한 타입 외에 다른 타입의 객체가 저장되면 에러가 발생한다.
  *
  * ArrayList<Tv> tvList = new ArrayList<Tv>(); //Tv 객체만 저장할 수 있는 ArrayList 생성
  *
  * tvList.add(new Tv()); // OK
  * tvList.add(new Audio()); // 에러. Tv 외에 다른 타입은 저장 불가
  *
  * 그리고 저장된 객체를 꺼낼 때는 형변환할 필요가 없어서 편리하다. 이미 어떤 타입의 객체들이 저장되어 있는지 알기 때문이다.
  * 제네릭스를 적용한 코드와 아닌 코드를 비교해보자.
  *
  * tvList.add(new Tv());
  * Tv tv = (Tv) tvList.get(0); //형변환 필요
  *
  * Tv tv = tvList.get(0); //형변환 불필요
  *
  * 정리하면, 제네릭스를 도입함으로써 얻는 장점은 다음과 같다.
  *
  * 1. 타입 안정성을 제공한다.
  *    ※ 타입 안정성이란 의도하지 않은 타입의 객체를 저장하는 것을 막고, 저장된 객체를 꺼내올 때 원래의 타입과 다른 타입으로 형변환 되는 것을 막는 것이다.
  * 2. 타입 체크와 형변환을 생략할 수 있으므로 코드가 간결해 진다.
  *
  *
  *
  *
  * */

}
