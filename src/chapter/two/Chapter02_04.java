package chapter.two;

public class Chapter02_04 {

  /** ◆ 변수의 타입
   *
   * 변수를 선언할 때, 변수에 저장할 값의 종류에 따라 변수의 타입을 선택해야 한다.
   * 변수의 타입에는 참조형과 기본형이 있는데, 일단 자주 사용하는 타입부터 소개한다.
   *
   *
   *  숫자  →  int/long : 정수(integer)를 저장하기 위한 타입. 20억 이상이라면 long
   *          float/double : 실수를 저장하기 위한 타입. float는 소숫점 7자리까지, double은 소숫점 15자리까지
   *
   *  문자  →  char/String : 문자를 저장하기 위한 타입. 여러 문자가 합쳐진 문자열의 경우 String
   *
   *  int x = 100; //정수 저장
   *  double pi = 3.14; //실수 저장
   *  char ch = 'a'; //단일 문자 저장
   *  String str = "abc"; //여러 문자가 합쳐진 문자열 저장
   *
   *  ◆ 상수와 리터럴
   *  '상수(Constant)'는 변수와 마찬가지로 '값을 저장할 수 있는 공간'이지만, 변수와 달리 한번 값을 저장하면
   *  다른 값으로 변경할 수 없다. 상수를 선언하는 방법은 변수와 동일하며, 단지 변수 타입 앞에
   *  키워드 final를 붙여주면 된다.
   *
   *  final int MAX_SPEED = 10;
   *
   *  일단 상수에 값이 저장된 후에는 상수의 값을 변경하는 것이 허용되지 않는다.
   *
   *  final int MAX_VALUE; // 정수형 상수 선언
   *  MAX_VALUE = 100; // 상수에 처음으로 값 저장
   *  MAX_VALUE = 200; // 에러. 한번 저장된 상수 값은 변경될 수 없다.
   *
   *  상수의 이름은 모두 대문자로 하는 것이 관례이며, 여러 단어로 이루어진 경우 '_'로 구분한다.
   *
   *  ◆ 리터럴(literal)
   *
   *  원래는 12, 123, 3.14, 'A'와 같은 값들이 상수인데, 프로그래밍에서는 상수를 '값이 저장되면
   *  다시 변경할 수 없는 저장공간'으로 정의하였기 때문에 이와 구분하기 위해 상수를 다른 이름으로 불러야 한다.
   *  그래서 상수 대신 리터럴이라는 용어를 사용한다. 리터럴을 복잡하게 생각할 필요없다. 리터럴은
   *  단지 우리가 기존에 알고 있던 '상수'의 다른 이름일 뿐이다.
   *
   *   변수(Variable) = 하나의 값을 저장하기 위한 공간
   *   상수(Constant) = 값을 한번만 저장할 수 있는 공간
   *   리터럴(literal) = 그 자체로 값을 의미하는 것
   *
   *  int year = 2014;
   *       ↑      ↑
   *      변수    리터럴
   *
   * */

}
