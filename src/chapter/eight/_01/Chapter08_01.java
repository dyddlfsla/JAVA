package chapter.eight._01;

public class Chapter08_01 {

  /** ◆ 프로그램 오류
   *
   * 프로그램이 실행 중 어떤 원인에 의해서 오작동을 하거나 비정상적으로 종료되는 경우가 있다. 이러한 결과를 초래하는 원인을 프로그램 에러 또는 오류라고 한다.
   * 이를 발생 시점에 따라 '컴파일 에러(compile-time error)' 와 '런타임 에러(runtime error)' 로 나눌 수 있는데, 글자 그대로
   * '컴파일 에러'는 컴파일 할 때 발생하는 에러이고 프로그램의 실행 도중에 발생하는 에러를 '런타임 에러'라고 한다. 이 외에도 '논리적 에러(logical error)' 가 있는데,
   * 컴파일도 잘 되고 실행도 잘 되지만 의도한 것과 다르다 동작하는 것을 말한다. 예를 들어, 창고의 재고가 음수가 된다던지 게임 프로그램에서 비행기가 총알을 맞아도
   * 죽지 않는 경우가 이에 해당될 것이다.
   *
   * =================================================
   * 1. 컴파일 에러 : 컴파일 시에 발생하는 에러
   * 2. 런타임 에러 : 실행 시에 발생하는 에러
   * 3. 논리적 에러 : 실행은 되지만 원래 의도와는 다르게 동작하는 것
   * =================================================
   *
   * 소스코드를 컴파일 하면 컴파일러가 소스코드(*.java) 에 대해 오타나 잘못된 구문, 자료형 체크 등의 기본적인 검사를 수행하여 오류가 있는지를 알려준다. 컴파일러가 알려준 에러들을
   * 모두 수정해서 컴파일을 성공적으로 마치고 나면, 클래스 파일(*.class) 이 생성되고, 생성된 클래스 파일을 실행할 수 있다.
   *
   * 하지만 컴파일 과정을 에러 없이 성공적으로 마쳤다고 해서 프로그램의 실행 시에도 에러가 발생하지 않는 것은 아니다. 컴파일러가 실행 도중에 발생할 수 있는
   * 잠재적인 오류까지 검사할 수 없기 때문에 컴파일은 잘 되었어도 실행 도중에 에러에 의해서 잘못된 결과를 얻거나 프로그램이 비정상적으로 종료될 수 있다.
   *
   * 런타임 에러를 방지하기 위해서는 프로그램의 실행 도중 발생할 수 있는 모든 경우의 수를 고려하여 이에 대한 대비를 하는 것이 필요하다.
   * 자바에서는 실행 시(runtime) 발생할 수 있는 프로그램 오류를 '에러(error)' 와 '예외(exception)' 두 가지로 구분하였다.
   *
   * ===========================================================
   * 에러(error) : 프로그램 코드에 의해서 수습될 수 없는 심각한 오류
   * 예외(exception) : 프로그램 코드에 의해서 수습될 수 있는 다소 미약한 오류
   * ===========================================================
   *
   * 에러는 메모리 부족(OutOfMemoryError) 이나 스택 오버플로우(StackOverFlowError)와 같이 일단 발생하면 복구할 수 없는 심각한 오류이고
   * 예외는 발생하더라도 수습될 수 있는 비교적 덜 심각한 것이다.
   *
   *
   * */

}
