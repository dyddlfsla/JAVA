package chapter.six_2nd._33;

public class Chapter06_33 {
  /** ◆ 기본 생성자 (default constructor)
   *
   *  지금까지는 생성자를 모르고도 프로그래밍을 해왔지만, 사실 모든 클래스에는 반드시 하나 이상의 생성자가 정의되어 있어야 한다.
   * 그러나 지금까지 클래스에 생성자를 정의하지 않고도 인스턴스를 생성할 수 있었던 이유는 컴파일러가 제공하는 '기본 생성자(default constructor)' 덕분이었다.
   *
   * 컴파일할 때, 소스파일(*.java)의 클래스에 생성자가 하나도 정의되지 않은 경우 컴파일러는 자동적으로 아래와 같은 내용의 기본 생성자를 추가하여 컴파일한다.
   *
   * [클래스이름]() {} //기본 생성자 생성
   * Point() {} //Point 클래스의 기본 생성자
   *
   * 컴파일러가 자동적으로 추가해주는 기본 생성자는 이와 같이 매개변수도 없고 아무런 내용도 없는 아주 간단한 것이다.
   * 그동안 우리가 인스턴스를 생성할 때 컴파일러가 제공한 기본 생성자를 사용해왔던 것이다. 특별히 인스턴스 초기화 작업이 요구되어지지 않는다면
   * 생성자를 정의하지 않고 컴파일러가 제공하는 기본 생성자를 사용하는 것도 좋다.
   *
   * ※ 클래스의 '접근 제어자(access Modifier)' 가 public 인 경우에는 기본 생성자의 접근 제어자 역시 public 이 된다.
   *
   *
   * */
}

class Data_1 {
  int value; //클래스 내에 생성자가 하나도 없으므로 컴파일러가 기본 생성자를 추가해준다.
}

class Data_2 {
  int value;

  public Data_2(int value) { //매개변수가 있는 생성자. 이미 생성자가 존재하므로 컴파일러가 기본 생성자를 추가해주지 않는다.
    this.value = value;
  }
}

class Ex6_11 {

  public static void main(String[] args) {
    Data_1 data_1 = new Data_1();
    //Data_2 data_2 = new Data_2();  compile error 발생.
  }
}

/**
 *  위의 예제를 컴파일하면 에러메세지가 나타날 것이다. 이것은 Data_2 클래스에서 Data_2() 라는 생성자를 찾을 수 없다는 내용의 에러 메시지인데,
 *  Data_2 클래스에 생성자 Data_2() 가 정의되어 있지 않기 때문에 에러가 발생한 것이다.
 *
 *  Data_1 의 인스턴스를 생성하는 코드에는 에러가 없는데, Data_2 의 인스턴스를 생성하는 코드에서 에러가 발생하는 이유가 뭘까?
 *  그 이유는 Data_1 에는 정의되어 있는 생성자가 하나도 없기 때문에 컴파일러가 기본 생성자를 추가해주었지만, Data_2 에는 이미 생성자 Data_2(int x) 가
 *  있으므로 기본 생성자가 추가되지 않았기 때문이다. 컴파일러가 자동적으로 기본 생성자를 추가해주는 경우는 '클래스 내에 생성자가 하나도 없을 때 뿐' 이라는 것을 명심해야 한다.
 *
 *  위의 에러를 고치려고 한다면 인스턴스 생성 시 클래스에 정의되어 있는 Data_2(int x) 를 이용하던가 아니면 클래스 내에 기본 생성자를 명시적으로 추가해주면 된다.
 *
 * =====================================================================
 *  컴파일러가 기본 생성자를 추가해주는 경우는 클래스에 정의된 생성자가 하나도 없을 때뿐이다.
 * =====================================================================
 *
 *
 *
 * */