package chapter.six_2nd._08;

public class Chapter06_8 {

  /** ◆ 객체 배열
   *
   * 많은 수의 객체를 다뤄야 할 때, 배열로 다루면 편리할 것이다. 객체 역시 배열로 다루는 것이 가능하며, 이를 '객체 배열'이라고 한다.
   * 그렇다고 객체 배열 안에 객체가 저장되는 것은 아니고, 객체의 주소가 저장된다. 사실 객체 배열은 참조변수들을 하나로 묶은
   * 참조변수 배열인 것이다.
   *
   * Tv tv1, tv2, tv3; → Tv[] tvArr = new Tv[3];
   *
   * 길이가 3인 객체 배열 tvArr 을 생성하면, 각 요소는 참조변수의 기본값인 null 로 자동 초기화된다. 그리고 이 객체 배열은 3개의 객체
   * 정확히는 3개의 객체 주소를 저장할 수 있다.
   *
   * 객체 배열을 생성하는 것은, 그저 객체를 다루기 위한 참조변수들이 만들어진 것일 뿐 아직 객체가 저장되지 않았다. 객체를 생성해서
   * 객체 배열의 각 요소에 저장하는 것을 잊으면 안된다. 지금은 이런 실수를 안 할것 같지만 객체 배열에서 제일 많이 받는 질문이
   * 객체 배엶만 생성해놓고 '분명히 객체를 생성했는데, 에러가 나요' 라는 것이다.
   *
   *  Tv[] tvArr = new Tv[3]; //참조변수 배열(객체 배열) 생성
   *
   *  tvArr[0] = new Tv(); // 각 배열 요소에 객체 주소 저장
   *  tvArr[1] = new Tv();
   *  tvArr[2] = new Tv();
   *
   *  배열의 초기화 블럭을 사용하면 , 다음과 같이 한 줄로 간단히 할 수 있다.
   *  Tv[] tvArr = {
   *    new Tv(),
   *    new Tv(),
   *    new Tv(),
   *  };
   *
   *  다뤄야 할 객체의 수가 많을 때에는 for 문을 사용하면 된다.
   *
   *  Tv[] tvArr = new Tv[100];
   *
   *  for (int i = 0; i < tvArr.length; i++) {
   *    tvArr[i] = new Tv();
   *  }
   *
   *
   *
   * */

}
