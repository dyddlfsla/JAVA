package chapter.six_2nd._09;

public class Chapter06_9 {

  /** ◆ 클래스의 정의 (1) - 데이터와 함수의 결합
   *
   * 클래스는 '객체를 생성하기 위한 틀' 이며 '클래스는 속성과 기능으로 정의되어 있다'라고 했다. 이것은 객체 지향 이론의 관점에서
   * 내린 정의이고, 이번엔 프로그래밍적인 관점에서 클래스의 정의와 의미를 살펴보자.
   *
   * 프로그래밍 언어에서 데이터 처리를 위한 데이터 저장 형태의 발전 과정은 다음과 같다.
   *
   *  변수    →    배열    →     구조체    →      클래스
   *  1            1             1              1
   *               2           10.0F          10.0F   + function
   *               3            'a'            'a'
   *
   * ============================================================================
   * 1. 변수: 하나의 데이터를 저장하는 공간
   * 2. 배열: 같은 종류의 여러 데이터를 하나의 집합으로 저장할 수 있는 공간
   * 3. 구조체: 서로 관련된 여러 데이터를 종류에 관계없이 하나의 집합으로 저장할 수 있는 공간
   * 4. 클래스: 데이터와 함수의 집합 (구조체 + 함수)
   *
   * 하나의 데이터를 저장하기 위해 변수를, 그리고 같은 종류의 데이터를 보다 효율적으로 다루기 위해서 배열이라는 개념을 도입했으며
   * 후에는 구조체(structure) 가 등장하여 자료형의 종류에 상관없이 서로 관계가 깊은 변수들을 하나로 묶어서 다룰 수 있도록 했다.
   *
   * 그동안 데이터와 함수가 서로 관계가 없는 것처럼 데이터는 데이터끼리, 함수는 함수끼리 따로 다루어져 왔지만 사실 함수는 데이터를 가지고
   * 작업을 하기 때문에 많은 경우에 있어서 데이터와 함수는 관계가 깊다.
   *
   * 그래서 자바와 같은 객체 지향 언어에서는 변수(데이터)와 함수를 하나의 클래스에 정의하여 서로 관계가 깊은 변수와 함수들을 함께 다룰 수 있도록 했다.
   * 서로 관련된 변수들을 정의하고 이들에 대한 작업을 수행하는 함수들을 함께 정의한 것이 바로 클래스이다. C 언어에서는 문자열을 문자의 배열로
   * 다루지만, 자바에서는 String 이라는 클래스로 문자열을 다룬다. 문자열을 단순히 문자의 배열로 정의하지 않고 클래스로 지정한 이유는
   * 문자열과 문자열을 다루는데 필요한 함수들을 함께 묶기 위해서이다.
   *
   * public final class String implements java.io.Serializable, Comparable {
   *   private char[] value; //문자열을 처리하기 위한 공간
   *
   *   public String replace(char oldChar, char newChar) {
   *     ...
   *     char[] val = value; // 같은 클래스내의 변수를 사용해서 작업을 한다.
   *     ...
   *   }
   * }
   *
   *
   * */

}
