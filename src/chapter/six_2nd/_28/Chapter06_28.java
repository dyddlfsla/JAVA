package chapter.six_2nd._28;

public class Chapter06_28 {

  /** ◆ static 을 언제 붙여야 할까?
   *
   * 1. 클래스를 설계할 때 , 멤버변수 중 모든 인스턴스에 공통적으로 사용하는 것에 static 을 붙인다.
   * - 생성된 각 인스턴스는 서로 독립적이기 때문에 각 인스턴스의 변수(iv) 는 서로 다른 값을 유지한다.
   * 그러나 모든 인스턴스에서 같은 값이 유지되어야 하는 변수는 static 을 붙여서 클래스 변수로 정의해야 한다.
   *
   * 2. 클래스 변수(static 변수)는 인스턴스를 생성하지 않아도 사용할 수 있다.
   * -static 이 붙은 변수는 클래스가 메모리에 올라갈 때 이미 자동적으로 생성되기 때문이다.
   *
   * 3. 클래스 메서드(static 메서드)는 인스턴스 변수를 사용할 수 없다.
   * - 인스턴스 변수는 인스턴스가 반드시 존재해야만 사용할 수 있는데, 클래스 메서드(static 이 붙은 메서드)는 인스턴스 생성 없이
   * 호출 가능하므로 클래스 메서드가 호출되었을 때 해당 인스턴스가 존재 할수도, 존재하지 않을수도 있다. 그래서 클래스 메서드에서
   * 인스턴스 변수의 사용을 금지한다.
   * 반면에 인스턴스 변수나 인스턴스 메서드에서는 static 이 붙은 멤버들을 언제나 자유롭게 사용할 수 있다. 인스턴스 변수가 존재한다는 것은
   * static 변수가 이미 먼저 메모리 위에 존재한다는것을 보장하기 때문이다.
   *
   * 4. 메서드 내에 인스턴스 변수를 사용하지 않는다면, static 을 붙이는 것을 고려한다.
   * - 메서드 작업 내용 중에서 인스턴스 변수를 필요로 한다면 static 을 붙일 수 없다. 반대로 인스턴스 변수를 필요로 하지 않는다면
   *  static 을 붙이자. 메서드 호출 시간이 짧아지므로 성능이 향상된다. static 을 안 붙인 메서드(인스턴스 메서드)는 실행 시 호출 되어야할
   *  메서드를 찾는 과정이 추가적으로 필요하기 때문에 시간이 더 걸린다.
   *
   * - 클래스의 멤버변수 중 모든 인스턴스에 공통된 값을 유지해야 하는 것이 있는지 살펴보고 있으면, static 을 붙여준다.
   * - 작성한 메서드 중 인스턴스 변수나 인스턴스 메서드를 사용하지 않는 메서드에 static 을 붙일 것을 고려한다.
   *
   *
   * */

}
